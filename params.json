{
  "name": "Weatherlibrary",
  "tagline": "",
  "body": "# WeatherLibrary\r\n\r\nWeatherLibrary provides you with a standardised protocol for getting weather data for you apps.\r\n\r\n## Installation\r\n\r\nTo include WeatherLibrary into your project you can either download the repository and add a reference to the library from your project, or you can compile the library by itself and include a reference to the built dll file.\r\n\r\n## Usage\r\n\r\nTo get the weather for today from a specific location:\r\n\r\n```c#\r\nOpenMapDataService.setApiKey(\"YOUR_OPEN_WEATHER_MAP_API_KEY\");\r\nIWeatherDataService weatherService = WeatherDataServiceFactory.GetWeatherDataService(WeatherDataServiceFactory.OPEN_WEATHER_MAP);\r\n\r\nCityLocation location = new CityLocation(\"Tel Aviv\");\r\nWeatherData data = weatherService.GetWeatherData(location);\r\n```\r\n\r\n## Documentation\r\n\r\n##### IWeatherDataService\r\n\r\n`GetWeatherData` gets the current weather at the specified location optionally specifying if the result should be in celsius or fahrenheit (defaults to celsius if not specified).\r\n\r\n```c#\r\nWeatherData GetWeatherData(Location location, [WeatherUnits unit]);\r\n```\r\n\r\n`GetWeatherForcast` receives the same parameters as above except returns the forecasted weather for the next few days.\r\n\r\n```c#\r\nList<WeatherData> GetWeatherForcast(Location location, [WeatherUnits unit]);\r\n```\r\n\r\n`GetUVIndex` returns the current UV index as a float for the given location.\r\n\r\n```c#\r\nfloat GetUVIndex(Location location);\r\n```\r\n\r\n#####  Locations\r\n\r\nIn WeatherLibrary there are a number of ways you can specify a location:\r\n\r\n###### City Location\r\n\r\nSpecify a location by city name with an optional second parameter#  for the countries code (e.g. IL for Israel). \r\n\r\n`CityLocation(string city, [string country_code])`\r\n\r\n###### Coordinate Location\r\n\r\nSpecify a location via it's longitude and latitude\r\n\r\n`CoordinateLocation(float lon, float lat)`\r\n\r\n###### ZipLocation\r\n\r\nSpecify a location by a zip code and country code\r\n\r\n`Ziplocation (string zip, string cCode)`\r\n\r\n##### Weather Data Services\r\n\r\nWeatherLibrary can be extended to include other weather APIs, but out of the box it comes with a data source for [openweathermap.org](http://openweathermap.org). To use the OpenWeatherMap data source you need to get an api key by signing up to their site, and then set the api key before calling weather functions by calling:\r\n\r\n```c#\r\nOpenMapDataService.setApiKey(\"YOUR_OPEN_WEATHER_MAP_API_KEY\");\r\n```\r\n\r\n## Credits\r\n\r\nWeatherLibrary was created by Nitzan Blankleder and Gabriel Manricks\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}